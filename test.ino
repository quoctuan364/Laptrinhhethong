#include <DHT.h>

/* ====== C·∫£m bi·∫øn DHT11 ====== */
#define DHTPIN   27
#define DHTTYPE  DHT11
DHT dht(DHTPIN, DHTTYPE);

/* ====== C·∫£m bi·∫øn analog ====== */
#define RAIN_SENSOR_PIN   32   // M∆∞a (ADC1)
#define WATER_SENSOR_PIN  33   // Ng·∫≠p n∆∞·ªõc (ADC1)
#define SOIL_PIN          34   // ƒê·ªô ·∫©m n·ªÅn (ADC1 - input only)

/* ====== Ch·∫•p h√†nh ====== */
#define RELAY_PIN   25         // Relay b∆°m (ƒëa s·ªë Active-LOW)
#define BUZZER_PIN  23         // Buzzer 5V

// LED RGB 4 ch√¢n (m·ªói k√™nh R/G/B qua ƒëi·ªán tr·ªü 220‚Äì330Œ©)
#define LED_R 14
#define LED_G 26
#define LED_B 18
const bool LED_COMMON_ANODE = false;   // false: ch√¢n chung n·ªëi +3.3V ;

/* ====== Ng∆∞·ª°ng ====== */
const int RAIN_T0 = 500,  RAIN_T1 = 1500, RAIN_T2 = 3000;   // m∆∞a

// N∆∞·ªõc v·ªõi hysteresis
const int WATER_T0        = 500;    // <500  => n·ªÅn kh√¥
const int WATER_HIGH_ON   = 1500;   // >=1500 => NG·∫¨P CAO (b·∫≠t b∆°m)
const int WATER_HIGH_OFF  = 1300;   // <=1300 => H·∫øt ng·∫≠p cao (t·∫Øt b∆°m)

/* ====== Calib Soil (ƒëi·ªÅn theo th·ª±c t·∫ø ) ====== */
int SOIL_DRY = 3200;   // RAW khi kh√¥
int SOIL_WET = 1300;   // RAW khi ∆∞·ªõt

/* ====== H√ÄM PH·ª§ & M√ÄU LED (d√πng m√£ s·ªë ƒë·ªÉ tr√°nh l·ªói auto-prototype) ====== */
#define LED_OFF   0
#define LED_RED   1
#define LED_BLUE  2
#define LED_GREEN 3

inline int avgAnalog(int pin, int n=5){
  long s=0; for(int i=0;i<n;i++){ s+=analogRead(pin); delay(3);} return s/n;
}

void setRGB(bool r,bool g,bool b){
  auto drive=[&](int pin,bool on){
    if(LED_COMMON_ANODE) digitalWrite(pin, on?LOW:HIGH);
    else                 digitalWrite(pin, on?HIGH:LOW);
  };
  drive(LED_R,r); drive(LED_G,g); drive(LED_B,b);
}

void setColor(uint8_t c){
  switch(c){
    case LED_RED:   setRGB(true,  false, false); break; // ƒê·ªè
    case LED_BLUE:  setRGB(false, false, true ); break; // Xanh d∆∞∆°ng (xanh n∆∞·ªõc bi·ªÉn)
    case LED_GREEN: setRGB(false, true,  false); break; // Xanh l√°
    default:        setRGB(false,false,false);  break;  // T·∫Øt
  }
}

void setup() {
  Serial.begin(115200);
  delay(200);

  // ADC ESP32
  analogSetWidth(12);               // 0..4095
  analogSetAttenuation(ADC_11db);   // ~0..3.3V

  dht.begin();

  pinMode(RAIN_SENSOR_PIN,  INPUT);
  pinMode(WATER_SENSOR_PIN, INPUT);
  pinMode(SOIL_PIN,         INPUT);

  pinMode(RELAY_PIN,  OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_R, OUTPUT); pinMode(LED_G, OUTPUT); pinMode(LED_B, OUTPUT);

  // T·∫Øt ban ƒë·∫ßu
  digitalWrite(RELAY_PIN, HIGH);   // Active LOW ‚Üí HIGH = T·∫Øt b∆°m
  digitalWrite(BUZZER_PIN, LOW);
  setColor(LED_OFF);

  Serial.println("ESP32 - DHT11, Rain, Water + Soil + Relay (Arduino IDE)");
  Serial.println("L∆∞u √Ω: c·∫•p 3.3V cho module analog ƒë·ªÉ AO <= 3.3V; n·∫øu d√πng 5V, ph·∫£i chia √°p.");
}

void loop() {
  /* ==== ƒê·ªçc DHT11 ==== */
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("‚ùå L·ªói ƒë·ªçc DHT11");
  } else {
    Serial.print("üå° Nhi·ªát ƒë·ªô: "); Serial.print(temperature);
    Serial.print("¬∞C | üíß ƒê·ªô ·∫©m: "); Serial.print(humidity); Serial.println("%");
  }

  /* ==== ƒê·ªçc c·∫£m bi·∫øn m∆∞a, n∆∞·ªõc, soil (0..4095) ==== */
  int rainValue  = avgAnalog(RAIN_SENSOR_PIN);
  int waterValue = avgAnalog(WATER_SENSOR_PIN);
  int soilRaw    = avgAnalog(SOIL_PIN);
  float soilPct  = 100.0f * (SOIL_DRY - soilRaw) / (float)(SOIL_DRY - SOIL_WET);
  soilPct = constrain(soilPct, 0.0f, 100.0f);

  Serial.print("üåß M∆∞a (RAW): ");   Serial.print(rainValue);
  Serial.print(" | üí¶ N∆∞·ªõc (RAW): "); Serial.print(waterValue);
  Serial.print(" | üå± ƒê·ªô ·∫©m n·ªÅn (RAW): "); Serial.print(soilRaw);
  Serial.print(" | %: "); Serial.println(soilPct, 1);

  /* ==== Ph√¢n lo·∫°i m∆∞a (gi·ªØ ƒë√∫ng c√¢u ch·ªØ c·ªßa anh) ==== */
  if (rainValue < RAIN_T0)       Serial.println("‚òÄÔ∏è Tr·ªùi kh√¥ r√°o");
  else if (rainValue < RAIN_T1)  Serial.println("üíß ·∫®m nh·∫π");
  else if (rainValue < RAIN_T2)  Serial.println("‚òÅÔ∏è M∆∞a nh·ªè");
  else                           Serial.println("‚ö†Ô∏è M∆∞a l·ªõn");

  /* ==== Ph√¢n lo·∫°i ng·∫≠p n∆∞·ªõc + hysteresis & ƒëi·ªÅu khi·ªÉn ==== */
  static bool floodHigh = false;           // tr·∫°ng th√°i ng·∫≠p cao
  static uint8_t curColor = LED_OFF;

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo hysteresis
  if (!floodHigh && waterValue >= WATER_HIGH_ON)  floodHigh = true;
  if (floodHigh  && waterValue <= WATER_HIGH_OFF) floodHigh = false;

  if (floodHigh) {
    Serial.println("üö® Ng·∫≠p cao - B·∫¨T B∆†M");
    digitalWrite(RELAY_PIN, LOW);     // ON (Active-LOW)
    digitalWrite(BUZZER_PIN, HIGH);
    setColor(LED_RED);
    if (curColor != LED_RED) { Serial.println("üî¥ ƒê√®n: ƒê·ªé"); curColor = LED_RED; }
  } else if (waterValue >= WATER_T0) {
    Serial.println("‚û°Ô∏è Ng·∫≠p th·∫•p - Ch∆∞a b∆°m");
    digitalWrite(RELAY_PIN, HIGH);    // OFF
    digitalWrite(BUZZER_PIN, HIGH);   // c·∫£nh b√°o
    setColor(LED_BLUE);               // Xanh n∆∞·ªõc bi·ªÉn
    if (curColor != LED_BLUE) { Serial.println("üîµ ƒê√®n: XANH N∆Ø·ªöC BI·ªÇN"); curColor = LED_BLUE; }
  } else {
    Serial.println("‚û°Ô∏è N·ªÅn kh√¥ - T·∫Øt b∆°m");
    digitalWrite(RELAY_PIN, HIGH);    // OFF
    digitalWrite(BUZZER_PIN, LOW);
    setColor(LED_GREEN);              // Xanh l√°
    if (curColor != LED_GREEN) { Serial.println("üü¢ ƒê√®n: XANH L√Å"); curColor = LED_GREEN; }
  }

  Serial.println("---------------------------");
  delay(2000);
}
